{"version":3,"sources":["../../../../../../packages/vite/src/migrations/update-20-5-0/update-resolve-conditions.ts"],"sourcesContent":["import { formatFiles, visitNotIgnoredFiles, type Tree } from '@nx/devkit';\nimport { tsquery } from '@phenomnomnominal/tsquery';\nimport picomatch = require('picomatch');\n\nconst REMIX_IMPORT_SELECTOR =\n  'ImportDeclaration:has(StringLiteral[value=@remix-run/dev]),CallExpression:has(Identifier[name=require]) StringLiteral[value=@remix-run/dev]';\nconst DEFINE_CONFIG_OBJECT_SELECTOR = `CallExpression:has(Identifier[name=defineConfig]) > ObjectLiteralExpression`;\nconst RESOLVE_PROPERTY_SELECTOR = `PropertyAssignment:has(Identifier[name=resolve]) > ObjectLiteralExpression`;\nconst CONDITIONS_PROPERTY_SELECTOR = `PropertyAssignment:has(Identifier[name=conditions]) > ArrayLiteralExpression`;\n\nconst _conditions_array_values = [\n  'module',\n  'browser',\n  'development|production',\n];\nconst _condition_obj = `conditions: ${JSON.stringify(\n  _conditions_array_values\n)},`;\nconst _resolve = `resolve: {\n  ${_condition_obj}\n},`;\n\nexport default async function (tree: Tree) {\n  const viteFiles = [];\n\n  visitNotIgnoredFiles(tree, '', (filePath) => {\n    if (picomatch('**/vite.*config*.{js,ts,mjs,mts,cjs,cts}')(filePath)) {\n      viteFiles.push(filePath);\n    }\n  });\n\n  for (const file of viteFiles) {\n    const contents = tree.read(file, 'utf-8');\n    const ast = tsquery.ast(contents);\n    const remixImportNodes = tsquery(ast, REMIX_IMPORT_SELECTOR, {\n      visitAllChildren: true,\n    });\n    if (remixImportNodes.length > 0) {\n      continue;\n    }\n\n    const defineConfigObjectNodes = tsquery(ast, DEFINE_CONFIG_OBJECT_SELECTOR);\n    if (defineConfigObjectNodes.length === 0) {\n      console.warn(\n        `Could not migrate vite config at ${file}. No \"defineConfig\" object found. Apply \"resolve.conditions: ['module', 'browser', 'development|production']\" manually to your vite config.`\n      );\n      continue;\n    }\n    let newContents = contents;\n    const defineConfigObjectNode = defineConfigObjectNodes[0];\n    const resolvePropertyNodes = tsquery(\n      defineConfigObjectNode,\n      RESOLVE_PROPERTY_SELECTOR\n    );\n    if (resolvePropertyNodes.length === 0) {\n      // Do not add resolve property if it does not already exist\n      continue;\n    } else {\n      const resolvePropertyNode = resolvePropertyNodes[0];\n      const conditionsPropertyNodes = tsquery(\n        resolvePropertyNode,\n        CONDITIONS_PROPERTY_SELECTOR\n      );\n      if (conditionsPropertyNodes.length === 0) {\n        // do not add conditions property if it does not already exist\n        continue;\n      } else {\n        const conditionPropertyNode = conditionsPropertyNodes[0];\n        const conditionsArrayValues = JSON.parse(\n          conditionPropertyNode.getText().replace(/['`]/g, '\"')\n        );\n        const newConditionArrayValues = [\n          ...new Set([...conditionsArrayValues, ..._conditions_array_values]),\n        ];\n        newContents =\n          newContents.slice(0, conditionPropertyNode.getStart()) +\n          `${JSON.stringify(newConditionArrayValues)}` +\n          newContents.slice(conditionPropertyNode.getEnd());\n      }\n    }\n\n    tree.write(file, newContents);\n  }\n\n  await formatFiles(tree);\n}\n"],"names":["picomatch","REMIX_IMPORT_SELECTOR","DEFINE_CONFIG_OBJECT_SELECTOR","RESOLVE_PROPERTY_SELECTOR","CONDITIONS_PROPERTY_SELECTOR","_conditions_array_values","_condition_obj","JSON","stringify","_resolve","tree","viteFiles","visitNotIgnoredFiles","filePath","push","file","contents","read","ast","tsquery","remixImportNodes","visitAllChildren","length","defineConfigObjectNodes","console","warn","newContents","defineConfigObjectNode","resolvePropertyNodes","resolvePropertyNode","conditionsPropertyNodes","conditionPropertyNode","conditionsArrayValues","parse","getText","replace","newConditionArrayValues","Set","slice","getStart","getEnd","write","formatFiles"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAsBA;;;eAAA;;;wBAtB6D;yBACrC;AACxB,MAAOA,oBAAoB;AAE3B,MAAMC,wBACJ;AACF,MAAMC,gCAAgC,CAAC,2EAA2E,CAAC;AACnH,MAAMC,4BAA4B,CAAC,0EAA0E,CAAC;AAC9G,MAAMC,+BAA+B,CAAC,4EAA4E,CAAC;AAEnH,MAAMC,2BAA2B;IAC/B;IACA;IACA;CACD;AACD,MAAMC,iBAAiB,CAAC,YAAY,EAAEC,KAAKC,SAAS,CAClDH,0BACA,CAAC,CAAC;AACJ,MAAMI,WAAW,CAAC;EAChB,EAAEH,eAAe;EACjB,CAAC;AAEY,eAAf,SAA+BI,IAAU;IACvC,MAAMC,YAAY,EAAE;IAEpBC,IAAAA,4BAAoB,EAACF,MAAM,IAAI,CAACG;QAC9B,IAAIb,UAAU,4CAA4Ca,WAAW;YACnEF,UAAUG,IAAI,CAACD;QACjB;IACF;IAEA,KAAK,MAAME,QAAQJ,UAAW;QAC5B,MAAMK,WAAWN,KAAKO,IAAI,CAACF,MAAM;QACjC,MAAMG,MAAMC,gBAAO,CAACD,GAAG,CAACF;QACxB,MAAMI,mBAAmBD,IAAAA,gBAAO,EAACD,KAAKjB,uBAAuB;YAC3DoB,kBAAkB;QACpB;QACA,IAAID,iBAAiBE,MAAM,GAAG,GAAG;YAC/B;QACF;QAEA,MAAMC,0BAA0BJ,IAAAA,gBAAO,EAACD,KAAKhB;QAC7C,IAAIqB,wBAAwBD,MAAM,KAAK,GAAG;YACxCE,QAAQC,IAAI,CACV,CAAC,iCAAiC,EAAEV,KAAK,2IAA2I,CAAC;YAEvL;QACF;QACA,IAAIW,cAAcV;QAClB,MAAMW,yBAAyBJ,uBAAuB,CAAC,EAAE;QACzD,MAAMK,uBAAuBT,IAAAA,gBAAO,EAClCQ,wBACAxB;QAEF,IAAIyB,qBAAqBN,MAAM,KAAK,GAAG;YAErC;QACF,OAAO;YACL,MAAMO,sBAAsBD,oBAAoB,CAAC,EAAE;YACnD,MAAME,0BAA0BX,IAAAA,gBAAO,EACrCU,qBACAzB;YAEF,IAAI0B,wBAAwBR,MAAM,KAAK,GAAG;gBAExC;YACF,OAAO;gBACL,MAAMS,wBAAwBD,uBAAuB,CAAC,EAAE;gBACxD,MAAME,wBAAwBzB,KAAK0B,KAAK,CACtCF,sBAAsBG,OAAO,GAAGC,OAAO,CAAC,SAAS;gBAEnD,MAAMC,0BAA0B;uBAC3B,IAAIC,IAAI;2BAAIL;2BAA0B3B;qBAAyB;iBACnE;gBACDqB,cACEA,YAAYY,KAAK,CAAC,GAAGP,sBAAsBQ,QAAQ,MACnD,CAAC,EAAEhC,KAAKC,SAAS,CAAC4B,yBAAyB,CAAC,GAC5CV,YAAYY,KAAK,CAACP,sBAAsBS,MAAM;YAClD;QACF;QAEA9B,KAAK+B,KAAK,CAAC1B,MAAMW;IACnB;IAEA,MAAMgB,IAAAA,mBAAW,EAAChC;AACpB"}