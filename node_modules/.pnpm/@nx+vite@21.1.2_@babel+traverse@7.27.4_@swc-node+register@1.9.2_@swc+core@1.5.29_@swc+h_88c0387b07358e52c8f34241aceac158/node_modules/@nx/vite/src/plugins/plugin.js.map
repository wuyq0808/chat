{"version":3,"sources":["../../../../../packages/vite/src/plugins/plugin.ts"],"sourcesContent":["import {\n  CreateDependencies,\n  CreateNodes,\n  CreateNodesContext,\n  CreateNodesContextV2,\n  createNodesFromFiles,\n  CreateNodesV2,\n  detectPackageManager,\n  getPackageManagerCommand,\n  joinPathFragments,\n  logger,\n  ProjectConfiguration,\n  readJsonFile,\n  TargetConfiguration,\n  writeJsonFile,\n} from '@nx/devkit';\nimport { dirname, isAbsolute, join, relative } from 'path';\nimport { getNamedInputs } from '@nx/devkit/src/utils/get-named-inputs';\nimport { existsSync, readdirSync } from 'fs';\nimport {\n  calculateHashesForCreateNodes,\n  calculateHashForCreateNodes,\n} from '@nx/devkit/src/utils/calculate-hash-for-create-nodes';\nimport { workspaceDataDirectory } from 'nx/src/utils/cache-directory';\nimport { getLockFileName } from '@nx/js';\nimport { loadViteDynamicImport } from '../utils/executor-utils';\nimport { hashObject } from 'nx/src/hasher/file-hasher';\nimport picomatch = require('picomatch');\nimport { isUsingTsSolutionSetup as _isUsingTsSolutionSetup } from '@nx/js/src/utils/typescript/ts-solution-setup';\nimport { addBuildAndWatchDepsTargets } from '@nx/js/src/plugins/typescript/util';\n\nconst pmc = getPackageManagerCommand();\n\nexport interface VitePluginOptions {\n  buildTargetName?: string;\n  testTargetName?: string;\n  /**\n   * @deprecated Use devTargetName instead. This option will be removed in Nx 22.\n   */\n  serveTargetName?: string;\n  devTargetName?: string;\n  previewTargetName?: string;\n  serveStaticTargetName?: string;\n  typecheckTargetName?: string;\n  watchDepsTargetName?: string;\n  buildDepsTargetName?: string;\n}\n\ntype ViteTargets = Pick<\n  ProjectConfiguration,\n  'targets' | 'metadata' | 'projectType'\n>;\n\nfunction readTargetsCache(cachePath: string): Record<string, ViteTargets> {\n  return process.env.NX_CACHE_PROJECT_GRAPH !== 'false' && existsSync(cachePath)\n    ? readJsonFile(cachePath)\n    : {};\n}\n\nfunction writeTargetsToCache(cachePath, results?: Record<string, ViteTargets>) {\n  writeJsonFile(cachePath, results);\n}\n\n/**\n * @deprecated The 'createDependencies' function is now a no-op. This functionality is included in 'createNodesV2'.\n */\nexport const createDependencies: CreateDependencies = () => {\n  return [];\n};\n\nconst viteVitestConfigGlob = '**/{vite,vitest}.config.{js,ts,mjs,mts,cjs,cts}';\n\nexport const createNodesV2: CreateNodesV2<VitePluginOptions> = [\n  viteVitestConfigGlob,\n  async (configFilePaths, options, context) => {\n    const optionsHash = hashObject(options);\n    const normalizedOptions = normalizeOptions(options);\n    const cachePath = join(workspaceDataDirectory, `vite-${optionsHash}.hash`);\n    const targetsCache = readTargetsCache(cachePath);\n    const isUsingTsSolutionSetup = _isUsingTsSolutionSetup();\n\n    const { roots: projectRoots, configFiles: validConfigFiles } =\n      configFilePaths.reduce(\n        (acc, configFile) => {\n          const potentialRoot = dirname(configFile);\n          if (checkIfConfigFileShouldBeProject(potentialRoot, context)) {\n            acc.roots.push(potentialRoot);\n            acc.configFiles.push(configFile);\n          }\n          return acc;\n        },\n        {\n          roots: [],\n          configFiles: [],\n        } as {\n          roots: string[];\n          configFiles: string[];\n        }\n      );\n\n    const lockfile = getLockFileName(\n      detectPackageManager(context.workspaceRoot)\n    );\n    const hashes = await calculateHashesForCreateNodes(\n      projectRoots,\n      { ...normalizedOptions, isUsingTsSolutionSetup },\n      context,\n      projectRoots.map((r) => [lockfile])\n    );\n\n    try {\n      return await createNodesFromFiles(\n        async (configFile, _, context, idx) => {\n          const projectRoot = dirname(configFile);\n          // Do not create a project if package.json and project.json isn't there.\n          const siblingFiles = readdirSync(\n            join(context.workspaceRoot, projectRoot)\n          );\n\n          const tsConfigFiles =\n            siblingFiles.filter((p) =>\n              picomatch('tsconfig*{.json,.*.json}')(p)\n            ) ?? [];\n\n          const hasReactRouterConfig = siblingFiles.some((configFile) => {\n            const parts = configFile.split('.');\n            return (\n              parts[0] === 'react-router' &&\n              parts[1] === 'config' &&\n              parts.length > 2\n            );\n          });\n\n          // results from vitest.config.js will be different from results of vite.config.js\n          // but the hash will be the same because it is based on the files under the project root.\n          // Adding the config file path to the hash ensures that the final hash value is different\n          // for different config files.\n          const hash = hashes[idx] + configFile;\n          const { projectType, metadata, targets } = (targetsCache[hash] ??=\n            await buildViteTargets(\n              configFile,\n              projectRoot,\n              normalizedOptions,\n              tsConfigFiles,\n              hasReactRouterConfig,\n              isUsingTsSolutionSetup,\n              context\n            ));\n\n          const project: ProjectConfiguration = {\n            root: projectRoot,\n            targets,\n            metadata,\n          };\n\n          // If project is buildable, then the project type.\n          // If it is not buildable, then leave it to other plugins/project.json to set the project type.\n          if (project.targets[normalizedOptions.buildTargetName]) {\n            project.projectType = projectType;\n          }\n\n          return {\n            projects: {\n              [projectRoot]: project,\n            },\n          };\n        },\n        validConfigFiles,\n        options,\n        context\n      );\n    } finally {\n      writeTargetsToCache(cachePath, targetsCache);\n    }\n  },\n];\n\nexport const createNodes: CreateNodes<VitePluginOptions> = [\n  viteVitestConfigGlob,\n  async (configFilePath, options, context) => {\n    logger.warn(\n      '`createNodes` is deprecated. Update your plugin to utilize createNodesV2 instead. In Nx 20, this will change to the createNodesV2 API.'\n    );\n    const projectRoot = dirname(configFilePath);\n    // Do not create a project if package.json and project.json isn't there.\n    const siblingFiles = readdirSync(join(context.workspaceRoot, projectRoot));\n    if (\n      !siblingFiles.includes('package.json') &&\n      !siblingFiles.includes('project.json')\n    ) {\n      return {};\n    }\n\n    const tsConfigFiles =\n      siblingFiles.filter((p) => picomatch('tsconfig*{.json,.*.json}')(p)) ??\n      [];\n\n    const hasReactRouterConfig = siblingFiles.some((configFile) => {\n      const parts = configFile.split('.');\n      return (\n        parts[0] === 'react-router' && parts[1] === 'config' && parts.length > 2\n      );\n    });\n\n    const normalizedOptions = normalizeOptions(options);\n\n    const isUsingTsSolutionSetup = _isUsingTsSolutionSetup();\n\n    const { projectType, metadata, targets } = await buildViteTargets(\n      configFilePath,\n      projectRoot,\n      normalizedOptions,\n      tsConfigFiles,\n      hasReactRouterConfig,\n      isUsingTsSolutionSetup,\n      context\n    );\n    const project: ProjectConfiguration = {\n      root: projectRoot,\n      targets,\n      metadata,\n    };\n\n    // If project is buildable, then the project type.\n    // If it is not buildable, then leave it to other plugins/project.json to set the project type.\n    if (project.targets[normalizedOptions.buildTargetName]) {\n      project.projectType = projectType;\n    }\n\n    return {\n      projects: {\n        [projectRoot]: project,\n      },\n    };\n  },\n];\n\nasync function buildViteTargets(\n  configFilePath: string,\n  projectRoot: string,\n  options: VitePluginOptions,\n  tsConfigFiles: string[],\n  hasReactRouterConfig: boolean,\n  isUsingTsSolutionSetup: boolean,\n  context: CreateNodesContext\n): Promise<ViteTargets> {\n  const absoluteConfigFilePath = joinPathFragments(\n    context.workspaceRoot,\n    configFilePath\n  );\n  // Workaround for the `build$3 is not a function` error that we sometimes see in agents.\n  // This should be removed later once we address the issue properly\n  try {\n    const importEsbuild = () => new Function('return import(\"esbuild\")')();\n    await importEsbuild();\n  } catch {\n    // do nothing\n  }\n  const { resolveConfig } = await loadViteDynamicImport();\n  const viteBuildConfig = await resolveConfig(\n    {\n      configFile: absoluteConfigFilePath,\n      mode: 'development',\n    },\n    'build'\n  );\n\n  const { buildOutputs, testOutputs, hasTest, isBuildable, hasServeConfig } =\n    getOutputs(viteBuildConfig, projectRoot, context.workspaceRoot);\n\n  const namedInputs = getNamedInputs(projectRoot, context);\n\n  const targets: Record<string, TargetConfiguration> = {};\n\n  // if file is vitest.config or vite.config has definition for test, create target for test\n  if (configFilePath.includes('vitest.config') || hasTest) {\n    targets[options.testTargetName] = await testTarget(\n      namedInputs,\n      testOutputs,\n      projectRoot\n    );\n  }\n\n  if (hasReactRouterConfig) {\n    // If we have a react-router config, we can skip the rest of the targets\n    return { targets, metadata: {}, projectType: 'application' };\n  }\n  // If file is not vitest.config and buildable, create targets for build, serve, preview and serve-static\n  const hasRemixPlugin =\n    viteBuildConfig.plugins &&\n    viteBuildConfig.plugins.some((p) => p.name === 'remix');\n  if (\n    !configFilePath.includes('vitest.config') &&\n    !hasRemixPlugin &&\n    isBuildable\n  ) {\n    targets[options.buildTargetName] = await buildTarget(\n      options.buildTargetName,\n      namedInputs,\n      buildOutputs,\n      projectRoot,\n      isUsingTsSolutionSetup\n    );\n\n    // If running in library mode, then there is nothing to serve.\n    if (!viteBuildConfig.build?.lib || hasServeConfig) {\n      const devTarget = serveTarget(projectRoot, isUsingTsSolutionSetup);\n\n      targets[options.serveTargetName] = {\n        ...devTarget,\n        metadata: {\n          ...devTarget.metadata,\n          deprecated:\n            'Use devTargetName instead. This option will be removed in Nx 22.',\n        },\n      };\n      targets[options.devTargetName] = devTarget;\n      targets[options.previewTargetName] = previewTarget(\n        projectRoot,\n        options.buildTargetName\n      );\n      targets[options.serveStaticTargetName] = serveStaticTarget(\n        options,\n        isUsingTsSolutionSetup\n      );\n    }\n  }\n\n  if (tsConfigFiles.length) {\n    const tsConfigToUse =\n      ['tsconfig.app.json', 'tsconfig.lib.json', 'tsconfig.json'].find((t) =>\n        tsConfigFiles.includes(t)\n      ) ?? tsConfigFiles[0];\n    targets[options.typecheckTargetName] = {\n      cache: true,\n      inputs: [\n        ...('production' in namedInputs\n          ? ['production', '^production']\n          : ['default', '^default']),\n        { externalDependencies: ['typescript'] },\n      ],\n      command: isUsingTsSolutionSetup\n        ? `tsc --build --emitDeclarationOnly`\n        : `tsc --noEmit -p ${tsConfigToUse}`,\n      options: { cwd: joinPathFragments(projectRoot) },\n      metadata: {\n        description: `Runs type-checking for the project.`,\n        technologies: ['typescript'],\n        help: {\n          command: isUsingTsSolutionSetup\n            ? `${pmc.exec} tsc --build --help`\n            : `${pmc.exec} tsc -p ${tsConfigToUse} --help`,\n          example: isUsingTsSolutionSetup\n            ? { args: ['--force'] }\n            : { options: { noEmit: true } },\n        },\n      },\n    };\n\n    if (isUsingTsSolutionSetup) {\n      targets[options.typecheckTargetName].dependsOn = [\n        `^${options.typecheckTargetName}`,\n      ];\n      targets[options.typecheckTargetName].syncGenerators = [\n        '@nx/js:typescript-sync',\n      ];\n    }\n  }\n\n  addBuildAndWatchDepsTargets(\n    context.workspaceRoot,\n    projectRoot,\n    targets,\n    options,\n    pmc\n  );\n\n  const metadata = {};\n  return {\n    targets,\n    metadata,\n    projectType: viteBuildConfig.build?.lib ? 'library' : 'application',\n  };\n}\n\nasync function buildTarget(\n  buildTargetName: string,\n  namedInputs: {\n    [inputName: string]: any[];\n  },\n  outputs: string[],\n  projectRoot: string,\n  isUsingTsSolutionSetup: boolean\n) {\n  const buildTarget: TargetConfiguration = {\n    command: `vite build`,\n    options: { cwd: joinPathFragments(projectRoot) },\n    cache: true,\n    dependsOn: [`^${buildTargetName}`],\n    inputs: [\n      ...('production' in namedInputs\n        ? ['production', '^production']\n        : ['default', '^default']),\n      {\n        externalDependencies: ['vite'],\n      },\n    ],\n    outputs,\n    metadata: {\n      technologies: ['vite'],\n      description: `Run Vite build`,\n      help: {\n        command: `${pmc.exec} vite build --help`,\n        example: {\n          options: {\n            sourcemap: true,\n            manifest: 'manifest.json',\n          },\n        },\n      },\n    },\n  };\n\n  if (isUsingTsSolutionSetup) {\n    buildTarget.syncGenerators = ['@nx/js:typescript-sync'];\n  }\n\n  return buildTarget;\n}\n\nfunction serveTarget(projectRoot: string, isUsingTsSolutionSetup: boolean) {\n  const targetConfig: TargetConfiguration = {\n    continuous: true,\n    command: `vite`,\n    options: {\n      cwd: joinPathFragments(projectRoot),\n    },\n    metadata: {\n      technologies: ['vite'],\n      description: `Starts Vite dev server`,\n      help: {\n        command: `${pmc.exec} vite --help`,\n        example: {\n          options: {\n            port: 3000,\n          },\n        },\n      },\n    },\n  };\n\n  if (isUsingTsSolutionSetup) {\n    targetConfig.syncGenerators = ['@nx/js:typescript-sync'];\n  }\n\n  return targetConfig;\n}\n\nfunction previewTarget(projectRoot: string, buildTargetName) {\n  const targetConfig: TargetConfiguration = {\n    continuous: true,\n    command: `vite preview`,\n    dependsOn: [buildTargetName],\n    options: {\n      cwd: joinPathFragments(projectRoot),\n    },\n    metadata: {\n      technologies: ['vite'],\n      description: `Locally preview Vite production build`,\n      help: {\n        command: `${pmc.exec} vite preview --help`,\n        example: {\n          options: {\n            port: 3000,\n          },\n        },\n      },\n    },\n  };\n\n  return targetConfig;\n}\n\nasync function testTarget(\n  namedInputs: {\n    [inputName: string]: any[];\n  },\n  outputs: string[],\n  projectRoot: string\n) {\n  return {\n    command: `vitest`,\n    options: { cwd: joinPathFragments(projectRoot) },\n    cache: true,\n    inputs: [\n      ...('production' in namedInputs\n        ? ['default', '^production']\n        : ['default', '^default']),\n      {\n        externalDependencies: ['vitest'],\n      },\n      { env: 'CI' },\n    ],\n    outputs,\n    metadata: {\n      technologies: ['vite'],\n      description: `Run Vite tests`,\n      help: {\n        command: `${pmc.exec} vitest --help`,\n        example: {\n          options: {\n            bail: 1,\n            coverage: true,\n          },\n        },\n      },\n    },\n  };\n}\n\nfunction serveStaticTarget(\n  options: VitePluginOptions,\n  isUsingTsSolutionSetup: boolean\n) {\n  const targetConfig: TargetConfiguration = {\n    continuous: true,\n    executor: '@nx/web:file-server',\n    options: {\n      buildTarget: `${options.buildTargetName}`,\n      spa: true,\n    },\n  };\n\n  if (isUsingTsSolutionSetup) {\n    targetConfig.syncGenerators = ['@nx/js:typescript-sync'];\n  }\n\n  return targetConfig;\n}\n\nfunction getOutputs(\n  viteBuildConfig: Record<string, any> | undefined,\n  projectRoot: string,\n  workspaceRoot: string\n): {\n  buildOutputs: string[];\n  testOutputs: string[];\n  hasTest: boolean;\n  isBuildable: boolean;\n  hasServeConfig: boolean;\n} {\n  const { build, test, server } = viteBuildConfig;\n\n  const buildOutputPath = normalizeOutputPath(\n    build?.outDir,\n    projectRoot,\n    workspaceRoot,\n    'dist'\n  );\n\n  const isBuildable =\n    build?.lib ||\n    build?.rollupOptions?.input ||\n    existsSync(join(workspaceRoot, projectRoot, 'index.html'));\n\n  const hasServeConfig = Boolean(server);\n\n  const reportsDirectoryPath = normalizeOutputPath(\n    test?.coverage?.reportsDirectory,\n    projectRoot,\n    workspaceRoot,\n    'coverage'\n  );\n\n  return {\n    buildOutputs: [buildOutputPath],\n    testOutputs: [reportsDirectoryPath],\n    hasTest: !!test,\n    isBuildable,\n    hasServeConfig,\n  };\n}\n\nfunction normalizeOutputPath(\n  outputPath: string | undefined,\n  projectRoot: string,\n  workspaceRoot: string,\n  path: 'coverage' | 'dist'\n): string | undefined {\n  if (!outputPath) {\n    if (projectRoot === '.') {\n      return `{projectRoot}/${path}`;\n    } else {\n      return `{workspaceRoot}/${path}/{projectRoot}`;\n    }\n  } else {\n    if (isAbsolute(outputPath)) {\n      return `{workspaceRoot}/${relative(workspaceRoot, outputPath)}`;\n    } else {\n      if (outputPath.startsWith('..')) {\n        return join('{workspaceRoot}', join(projectRoot, outputPath));\n      } else {\n        return join('{projectRoot}', outputPath);\n      }\n    }\n  }\n}\n\nfunction normalizeOptions(options: VitePluginOptions): VitePluginOptions {\n  options ??= {};\n  options.buildTargetName ??= 'build';\n  options.serveTargetName ??= 'serve';\n  options.devTargetName ??= 'dev';\n  options.previewTargetName ??= 'preview';\n  options.testTargetName ??= 'test';\n  options.serveStaticTargetName ??= 'serve-static';\n  options.typecheckTargetName ??= 'typecheck';\n  return options;\n}\n\nfunction checkIfConfigFileShouldBeProject(\n  projectRoot: string,\n  context: CreateNodesContext | CreateNodesContextV2\n): boolean {\n  // Do not create a project if package.json and project.json isn't there.\n  const siblingFiles = readdirSync(join(context.workspaceRoot, projectRoot));\n  if (\n    !siblingFiles.includes('package.json') &&\n    !siblingFiles.includes('project.json')\n  ) {\n    return false;\n  }\n\n  return true;\n}\n"],"names":["createDependencies","createNodes","createNodesV2","picomatch","pmc","getPackageManagerCommand","readTargetsCache","cachePath","process","env","NX_CACHE_PROJECT_GRAPH","existsSync","readJsonFile","writeTargetsToCache","results","writeJsonFile","viteVitestConfigGlob","configFilePaths","options","context","optionsHash","hashObject","normalizedOptions","normalizeOptions","join","workspaceDataDirectory","targetsCache","isUsingTsSolutionSetup","_isUsingTsSolutionSetup","roots","projectRoots","configFiles","validConfigFiles","reduce","acc","configFile","potentialRoot","dirname","checkIfConfigFileShouldBeProject","push","lockfile","getLockFileName","detectPackageManager","workspaceRoot","hashes","calculateHashesForCreateNodes","map","r","createNodesFromFiles","_","idx","hash","projectRoot","siblingFiles","readdirSync","tsConfigFiles","filter","p","hasReactRouterConfig","some","parts","split","length","projectType","metadata","targets","buildViteTargets","project","root","buildTargetName","projects","configFilePath","logger","warn","includes","viteBuildConfig","absoluteConfigFilePath","joinPathFragments","importEsbuild","Function","resolveConfig","loadViteDynamicImport","mode","buildOutputs","testOutputs","hasTest","isBuildable","hasServeConfig","getOutputs","namedInputs","getNamedInputs","testTargetName","testTarget","hasRemixPlugin","plugins","name","buildTarget","build","lib","devTarget","serveTarget","serveTargetName","deprecated","devTargetName","previewTargetName","previewTarget","serveStaticTargetName","serveStaticTarget","tsConfigToUse","find","t","typecheckTargetName","cache","inputs","externalDependencies","command","cwd","description","technologies","help","exec","example","args","noEmit","dependsOn","syncGenerators","addBuildAndWatchDepsTargets","outputs","sourcemap","manifest","targetConfig","continuous","port","bail","coverage","executor","spa","test","server","buildOutputPath","normalizeOutputPath","outDir","rollupOptions","input","Boolean","reportsDirectoryPath","reportsDirectory","outputPath","path","isAbsolute","relative","startsWith"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}