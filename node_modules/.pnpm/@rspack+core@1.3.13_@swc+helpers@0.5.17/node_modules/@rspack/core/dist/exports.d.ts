declare const rspackVersion: string;
declare const version: string;
export { rspackVersion, version };
export type { Asset, AssetInfo, Assets, CompilationParams, LogEntry } from "./Compilation";
export { Compilation } from "./Compilation";
export { Compiler } from "./Compiler";
export type { MultiCompilerOptions, MultiRspackOptions } from "./MultiCompiler";
export { MultiCompiler } from "./MultiCompiler";
import { RspackOptionsApply } from "./rspackOptionsApply";
export { RspackOptionsApply, RspackOptionsApply as WebpackOptionsApply };
export type { Chunk } from "./Chunk";
export type { ChunkGroup } from "./ChunkGroup";
export type { ResolveData, ResourceDataWithData } from "./Module";
export { MultiStats } from "./MultiStats";
export { Module } from "./Module";
export { NormalModule } from "./NormalModule";
export { ContextModule } from "./ContextModule";
export { ConcatenatedModule } from "./ConcatenatedModule";
export { ExternalModule } from "./ExternalModule";
export type { NormalModuleFactory } from "./NormalModuleFactory";
export type { default as ModuleGraph } from "./ModuleGraph";
export { RuntimeGlobals } from "./RuntimeGlobals";
export type { StatsAsset, StatsChunk, StatsCompilation, StatsError, StatsModule } from "./Stats";
export { Stats } from "./Stats";
export { RuntimeModule } from "./RuntimeModule";
export { EntryDependency, Dependency, AsyncDependenciesBlock } from "@rspack/binding";
export type { RspackError, RspackSeverity } from "./RspackError";
import * as ModuleFilenameHelpers from "./lib/ModuleFilenameHelpers";
export { ModuleFilenameHelpers };
export { Template } from "./Template";
export declare const WebpackError: ErrorConstructor;
export type { Watching } from "./Watching";
import sources = require("../compiled/webpack-sources");
export { sources };
import { applyRspackOptionsDefaults, getNormalizedRspackOptions } from "./config";
type Config = {
    getNormalizedRspackOptions: typeof getNormalizedRspackOptions;
    applyRspackOptionsDefaults: typeof applyRspackOptionsDefaults;
    getNormalizedWebpackOptions: typeof getNormalizedRspackOptions;
    applyWebpackOptionsDefaults: typeof applyRspackOptionsDefaults;
};
export declare const config: Config;
export type * from "./config";
import { ValidationError } from "./util/validate";
export { ValidationError };
export declare const util: {
    createHash: (algorithm: "debug" | "xxhash64" | "md4" | "native-md4" | (string & {}) | (new () => import("./util/hash").default)) => import("./util/hash").default;
    cleverMerge: <First, Second>(first: First, second: Second) => First | Second | (First & Second);
};
export { default as EntryOptionPlugin } from "./lib/EntryOptionPlugin";
export type { OutputFileSystem } from "./util/fs";
export type { BannerPluginArgument } from "./builtin-plugin";
export type { ProvidePluginOptions } from "./builtin-plugin";
export type { DefinePluginOptions } from "./builtin-plugin";
export type { ProgressPluginArgument } from "./builtin-plugin";
export type { EntryOptions } from "./builtin-plugin";
export { BannerPlugin } from "./builtin-plugin";
export { IgnorePlugin, type IgnorePluginOptions } from "./builtin-plugin";
export { ProvidePlugin } from "./builtin-plugin";
export { DefinePlugin } from "./builtin-plugin";
export { ProgressPlugin } from "./builtin-plugin";
export { RstestPlugin } from "./builtin-plugin";
export { EntryPlugin } from "./builtin-plugin";
export { DynamicEntryPlugin } from "./builtin-plugin";
export { ExternalsPlugin } from "./builtin-plugin";
export { HotModuleReplacementPlugin } from "./builtin-plugin";
export { NoEmitOnErrorsPlugin } from "./builtin-plugin";
export { WarnCaseSensitiveModulesPlugin } from "./builtin-plugin";
export { RuntimePlugin } from "./builtin-plugin";
export { DllPlugin, type DllPluginOptions } from "./lib/DllPlugin";
export { DllReferencePlugin, type DllReferencePluginOptions, type DllReferencePluginOptionsSourceType, type DllReferencePluginOptionsContent, type DllReferencePluginOptionsManifest } from "./lib/DllReferencePlugin";
export { EnvironmentPlugin } from "./lib/EnvironmentPlugin";
export { LoaderOptionsPlugin } from "./lib/LoaderOptionsPlugin";
export { LoaderTargetPlugin } from "./lib/LoaderTargetPlugin";
export { NormalModuleReplacementPlugin } from "./lib/NormalModuleReplacementPlugin";
import { FetchCompileAsyncWasmPlugin, SubresourceIntegrityPlugin, lazyCompilationMiddleware } from "./builtin-plugin";
interface Web {
    FetchCompileAsyncWasmPlugin: typeof FetchCompileAsyncWasmPlugin;
}
export declare const web: Web;
import { NodeTargetPlugin } from "./builtin-plugin";
import NodeEnvironmentPlugin from "./node/NodeEnvironmentPlugin";
import NodeTemplatePlugin from "./node/NodeTemplatePlugin";
interface Node {
    NodeTargetPlugin: typeof NodeTargetPlugin;
    NodeTemplatePlugin: typeof NodeTemplatePlugin;
    NodeEnvironmentPlugin: typeof NodeEnvironmentPlugin;
}
export declare const node: Node;
import { ElectronTargetPlugin } from "./builtin-plugin";
interface Electron {
    ElectronTargetPlugin: typeof ElectronTargetPlugin;
}
export declare const electron: Electron;
import { EnableLibraryPlugin } from "./builtin-plugin";
interface Library {
    EnableLibraryPlugin: typeof EnableLibraryPlugin;
}
export declare const library: Library;
import { EnableWasmLoadingPlugin } from "./builtin-plugin";
interface Wasm {
    EnableWasmLoadingPlugin: typeof EnableWasmLoadingPlugin;
}
export declare const wasm: Wasm;
import { EnableChunkLoadingPlugin, JavascriptModulesPlugin } from "./builtin-plugin";
interface JavaScript {
    EnableChunkLoadingPlugin: typeof EnableChunkLoadingPlugin;
    JavascriptModulesPlugin: typeof JavascriptModulesPlugin;
}
export declare const javascript: JavaScript;
import { WebWorkerTemplatePlugin } from "./builtin-plugin";
interface Webworker {
    WebWorkerTemplatePlugin: typeof WebWorkerTemplatePlugin;
}
export declare const webworker: Webworker;
import { LimitChunkCountPlugin } from "./builtin-plugin";
import { RuntimeChunkPlugin } from "./builtin-plugin";
import { SplitChunksPlugin } from "./builtin-plugin";
import { RemoveDuplicateModulesPlugin } from "./builtin-plugin";
import { RsdoctorPlugin } from "./builtin-plugin";
import { CssChunkingPlugin } from "./builtin-plugin";
interface Optimize {
    LimitChunkCountPlugin: typeof LimitChunkCountPlugin;
    RuntimeChunkPlugin: typeof RuntimeChunkPlugin;
    SplitChunksPlugin: typeof SplitChunksPlugin;
}
export declare const optimize: Optimize;
import { ModuleFederationPlugin } from "./container/ModuleFederationPlugin";
export type { ModuleFederationPluginOptions } from "./container/ModuleFederationPlugin";
import { ModuleFederationPluginV1 } from "./container/ModuleFederationPluginV1";
export type { ModuleFederationPluginV1Options } from "./container/ModuleFederationPluginV1";
import { ContainerPlugin } from "./container/ContainerPlugin";
import { ContainerReferencePlugin } from "./container/ContainerReferencePlugin";
export type { ContainerPluginOptions, Exposes, ExposesConfig, ExposesItem, ExposesItems, ExposesObject } from "./container/ContainerPlugin";
export type { ContainerReferencePluginOptions, Remotes, RemotesConfig, RemotesItem, RemotesItems, RemotesObject } from "./container/ContainerReferencePlugin";
export declare const container: {
    ContainerPlugin: typeof ContainerPlugin;
    ContainerReferencePlugin: typeof ContainerReferencePlugin;
    ModuleFederationPlugin: typeof ModuleFederationPlugin;
    ModuleFederationPluginV1: typeof ModuleFederationPluginV1;
};
import { ConsumeSharedPlugin } from "./sharing/ConsumeSharedPlugin";
import { ProvideSharedPlugin } from "./sharing/ProvideSharedPlugin";
import { SharePlugin } from "./sharing/SharePlugin";
export type { Consumes, ConsumesConfig, ConsumeSharedPluginOptions, ConsumesItem, ConsumesObject } from "./sharing/ConsumeSharedPlugin";
export type { Provides, ProvidesConfig, ProvideSharedPluginOptions, ProvidesItem, ProvidesObject } from "./sharing/ProvideSharedPlugin";
export type { Shared, SharedConfig, SharedItem, SharedObject, SharePluginOptions } from "./sharing/SharePlugin";
export declare const sharing: {
    ProvideSharedPlugin: typeof ProvideSharedPlugin;
    ConsumeSharedPlugin: typeof ConsumeSharedPlugin;
    SharePlugin: typeof SharePlugin;
};
export type { RsdoctorPluginData, RsdoctorPluginHooks } from "./builtin-plugin";
export type { HtmlRspackPluginOptions } from "./builtin-plugin";
export type { SwcJsMinimizerRspackPluginOptions } from "./builtin-plugin";
export type { LightningCssMinimizerRspackPluginOptions } from "./builtin-plugin";
export type { CircularDependencyRspackPluginOptions } from "./builtin-plugin";
export type { CopyRspackPluginOptions } from "./builtin-plugin";
export type { SourceMapDevToolPluginOptions } from "./builtin-plugin";
export type { EvalDevToolModulePluginOptions } from "./builtin-plugin";
export type { CssExtractRspackLoaderOptions, CssExtractRspackPluginOptions } from "./builtin-plugin";
export { HtmlRspackPlugin } from "./builtin-plugin";
export { SwcJsMinimizerRspackPlugin } from "./builtin-plugin";
export { LightningCssMinimizerRspackPlugin } from "./builtin-plugin";
export { CircularDependencyRspackPlugin } from "./builtin-plugin";
export { CopyRspackPlugin } from "./builtin-plugin";
export { SourceMapDevToolPlugin } from "./builtin-plugin";
export { EvalSourceMapDevToolPlugin } from "./builtin-plugin";
export { EvalDevToolModulePlugin } from "./builtin-plugin";
export { CssExtractRspackPlugin } from "./builtin-plugin";
export { ContextReplacementPlugin } from "./builtin-plugin";
export type { SwcLoaderEnvConfig, SwcLoaderEsParserConfig, SwcLoaderJscConfig, SwcLoaderModuleConfig, SwcLoaderOptions, SwcLoaderParserConfig, SwcLoaderTransformConfig, SwcLoaderTsParserConfig } from "./builtin-loader/swc/index";
export type { LoaderOptions as LightningcssLoaderOptions, FeatureOptions as LightningcssFeatureOptions } from "./builtin-loader/lightningcss/index";
export type { SubresourceIntegrityPluginOptions } from "./builtin-plugin";
import { minify, transform } from "./swc";
interface Experiments {
    globalTrace: {
        register: (filter: string, layer: "chrome" | "logger", output: string) => Promise<void>;
        cleanup: () => Promise<void>;
    };
    RemoveDuplicateModulesPlugin: typeof RemoveDuplicateModulesPlugin;
    RsdoctorPlugin: typeof RsdoctorPlugin;
    SubresourceIntegrityPlugin: typeof SubresourceIntegrityPlugin;
    lazyCompilationMiddleware: typeof lazyCompilationMiddleware;
    swc: {
        transform: typeof transform;
        minify: typeof minify;
    };
    CssChunkingPlugin: typeof CssChunkingPlugin;
}
export declare const experiments: Experiments;
