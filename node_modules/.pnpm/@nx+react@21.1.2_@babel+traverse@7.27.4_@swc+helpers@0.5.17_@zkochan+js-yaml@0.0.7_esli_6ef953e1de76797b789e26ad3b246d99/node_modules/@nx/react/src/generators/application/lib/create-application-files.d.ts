import { Tree } from '@nx/devkit';
import { WithNxOptions } from '@nx/webpack';
import { WithReactOptions } from '../../../../plugins/with-react';
import { NormalizedSchema } from '../schema';
export declare function getDefaultTemplateVariables(host: Tree, options: NormalizedSchema): {
    typesNodeVersion: string;
    typesReactDomVersion: string;
    reactRouterVersion: string;
    typesReactVersion: string;
    reactDomVersion: string;
    reactVersion: string;
    reactRouterIsBotVersion: string;
    js: boolean;
    tmpl: string;
    offsetFromRoot: string;
    appTests: string;
    inSourceVitestTests: string;
    style: "none" | "styled-components" | "@emotion/styled" | "styled-jsx" | "css" | "scss" | "less";
    hasStyleFile: boolean;
    isUsingTsSolutionSetup: boolean;
    projectName: string;
    appProjectRoot: string;
    e2eProjectName: string;
    e2eProjectRoot: string;
    importPath: string;
    parsedTags: string[];
    fileName: string;
    styledModule: null | import("../../../..").SupportedStyles;
    hasStyles: boolean;
    unitTestRunner: "jest" | "vitest" | "none";
    addPlugin?: boolean;
    names: ReturnType<typeof import("@nx/devkit").names>;
    isUsingTsSolutionConfig?: boolean;
    directory: string;
    name: string;
    skipFormat?: boolean;
    tags?: string;
    inSourceTests?: boolean;
    e2eTestRunner: "cypress" | "playwright" | "none";
    linter: import("@nx/eslint").Linter | import("@nx/eslint").LinterType;
    classComponent?: boolean;
    routing?: boolean;
    useReactRouter?: boolean;
    skipNxJson?: boolean;
    globalCss?: boolean;
    strict?: boolean;
    setParserOptionsProject?: boolean;
    compiler?: "babel" | "swc";
    remotes?: string[];
    devServerPort?: number;
    skipPackageJson?: boolean;
    rootProject?: boolean;
    bundler?: "webpack" | "vite" | "rspack" | "rsbuild";
    minimal?: boolean;
    nxCloudToken?: string;
    useTsSolution?: boolean;
    formatter?: "prettier" | "none";
    useProjectJson?: boolean;
    className: string;
    propertyName: string;
    constantName: string;
};
export declare function createNxRspackPluginOptions(options: NormalizedSchema, rootOffset: string, tsx?: boolean): WithNxOptions & WithReactOptions;
export declare function createApplicationFiles(host: Tree, options: NormalizedSchema): Promise<void>;
